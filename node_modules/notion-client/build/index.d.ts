import * as notion from 'notion-types';
import { Options } from 'ky';

interface SignedUrlRequest {
    permissionRecord: PermissionRecord;
    url: string;
}
interface PermissionRecord {
    table: string;
    id: notion.ID;
}
interface SignedUrlResponse {
    signedUrls: string[];
}

/**
 * Main Notion API client.
 */
declare class NotionAPI {
    private readonly _apiBaseUrl;
    private readonly _authToken?;
    private readonly _activeUser?;
    private readonly _userTimeZone;
    private readonly _kyOptions?;
    constructor({ apiBaseUrl, authToken, activeUser, userTimeZone, kyOptions }?: {
        apiBaseUrl?: string;
        authToken?: string;
        userLocale?: string;
        userTimeZone?: string;
        activeUser?: string;
        kyOptions?: Options;
    });
    getPage(pageId: string, { concurrency, fetchMissingBlocks, fetchCollections, signFileUrls, chunkLimit, chunkNumber, kyOptions }?: {
        concurrency?: number;
        fetchMissingBlocks?: boolean;
        fetchCollections?: boolean;
        signFileUrls?: boolean;
        chunkLimit?: number;
        chunkNumber?: number;
        kyOptions?: Options;
    }): Promise<notion.ExtendedRecordMap>;
    addSignedUrls({ recordMap, contentBlockIds, kyOptions }: {
        recordMap: notion.ExtendedRecordMap;
        contentBlockIds?: string[];
        kyOptions?: Options;
    }): Promise<void>;
    getPageRaw(pageId: string, { kyOptions, chunkLimit, chunkNumber }?: {
        chunkLimit?: number;
        chunkNumber?: number;
        kyOptions?: Options;
    }): Promise<notion.PageChunk>;
    getCollectionData(collectionId: string, collectionViewId: string, collectionView: any, { limit, searchQuery, userTimeZone, loadContentCover, kyOptions }?: {
        type?: notion.CollectionViewType;
        limit?: number;
        searchQuery?: string;
        userTimeZone?: string;
        userLocale?: string;
        loadContentCover?: boolean;
        kyOptions?: Options;
    }): Promise<notion.CollectionInstance>;
    getUsers(userIds: string[], kyOptions?: Options): Promise<notion.RecordValues<notion.User>>;
    getBlocks(blockIds: string[], kyOptions?: Options): Promise<notion.PageChunk>;
    getSignedFileUrls(urls: SignedUrlRequest[], kyOptions?: Options): Promise<SignedUrlResponse>;
    search(params: notion.SearchParams, kyOptions?: Options): Promise<notion.SearchResults>;
    fetch<T>({ endpoint, body, kyOptions, headers: clientHeaders }: {
        endpoint: string;
        body: object;
        kyOptions?: Options;
        headers?: any;
    }): Promise<T>;
}

export { NotionAPI, type PermissionRecord, type SignedUrlRequest, type SignedUrlResponse };
