/** UUID */
type ID = string;
/**
 * Unique identifier for collection properties representing the columns in a
 * traditional relational database.
 *
 * Either a 4-character hash like `o;Os` or `title` as a special, reserved
 * property ID for collection title properties.
 *
 * You can think of `title` properties as primary indexes that are guaranteed
 * to exist as in a traditional database.
 */
type PropertyID = string;
/** Block colors supported by Notion */
type Color = 'gray' | 'brown' | 'orange' | 'yellow' | 'teal' | 'blue' | 'purple' | 'pink' | 'red' | 'gray_background' | 'brown_background' | 'orange_background' | 'yellow_background' | 'teal_background' | 'blue_background' | 'purple_background' | 'pink_background' | 'red_background';
/** Types of structured data supported by Notion collections */
type PropertyType = 'title' | 'text' | 'number' | 'select' | 'status' | 'multi_select' | 'auto_increment_id' | 'date' | 'person' | 'file' | 'checkbox' | 'url' | 'email' | 'phone_number' | 'formula' | 'relation' | 'created_time' | 'created_by' | 'last_edited_time' | 'last_edited_by';
/** Types of number formatting supported by Notion */
type NumberFormat = 'number_with_commas' | 'percent' | 'dollar' | 'euro' | 'pound' | 'yen' | 'rupee' | 'won' | 'yuan' | 'argentine_peso' | 'baht' | 'canadian_dollar' | 'chilean_peso' | 'colombian_peso' | 'danish_krone' | 'dirham' | 'forint' | 'franc' | 'hong_kong_dollar' | 'koruna' | 'krona' | 'leu' | 'lira' | 'mexican_peso' | 'new_taiwan_dollar' | 'new_zealand_dollar' | 'norwegian_krone' | 'number' | 'philippine_peso' | 'peruvian_sol' | 'rand' | 'real' | 'ringgit' | 'riyal' | 'ruble' | 'rupiah' | 'shekel' | 'singapore_dollar' | 'uruguayan_peso' | 'zloty';
type Role = 'editor' | 'reader' | 'none' | 'read_and_write';
type BoldFormat = ['b'];
type ItalicFormat = ['i'];
type StrikeFormat = ['s'];
type CodeFormat = ['c'];
type UnderlineFormat = ['_'];
type LinkFormat = ['a', string];
type ExternalObjectInstanceFormat = ['eoi', string];
type ColorFormat = ['h', Color];
type UserFormat = ['u', string];
type PageFormat = ['p', string];
type InlineEquationFormat = ['e', string];
type DiscussionFormat = ['m', string];
type ExternalLinkFormat = ['â€£', [string, string]];
type DateFormat = ['d', FormattedDate];
interface FormattedDate {
    type: 'date' | 'daterange' | 'datetime' | 'datetimerange';
    start_date: string;
    start_time?: string;
    end_date?: string;
    end_time?: string;
    date_format?: string;
    time_zone?: string;
}
type SubDecoration = BoldFormat | ItalicFormat | StrikeFormat | CodeFormat | UnderlineFormat | LinkFormat | ColorFormat | DateFormat | UserFormat | InlineEquationFormat | PageFormat | ExternalLinkFormat | DiscussionFormat | ExternalObjectInstanceFormat;
type BaseDecoration = [string];
type AdditionalDecoration = [string, SubDecoration[]];
type Decoration = BaseDecoration | AdditionalDecoration;

type BlockType = 'page' | 'text' | 'bookmark' | 'bulleted_list' | 'numbered_list' | 'header' | 'sub_header' | 'sub_sub_header' | 'quote' | 'equation' | 'to_do' | 'table_of_contents' | 'divider' | 'column_list' | 'column' | 'callout' | 'toggle' | 'image' | 'embed' | 'gist' | 'video' | 'figma' | 'typeform' | 'replit' | 'codepen' | 'excalidraw' | 'tweet' | 'maps' | 'pdf' | 'audio' | 'drive' | 'file' | 'code' | 'collection_view' | 'collection_view_page' | 'transclusion_container' | 'transclusion_reference' | 'alias' | 'table' | 'table_row' | 'external_object_instance' | 'breadcrumb' | 'miro' | string;
/** The different block values a block can have. */
type Block = TextBlock | PageBlock | BulletedListBlock | NumberedListBlock | HeaderBlock | SubHeaderBlock | SubSubHeaderBlock | TodoBlock | TableOfContentsBlock | DividerBlock | ColumnListBlock | ColumnBlock | QuoteBlock | EquationBlock | CodeBlock | ImageBlock | VideoBlock | FigmaBlock | TypeformBlock | ReplitBlock | CodepenBlock | ExcalidrawBlock | TweetBlock | PdfBlock | MapsBlock | AudioBlock | GoogleDriveBlock | FileBlock | EmbedBlock | GistBlock | CalloutBlock | BookmarkBlock | ToggleBlock | CollectionViewBlock | CollectionViewPageBlock | SyncBlock | SyncPointerBlock | PageLink | TableBlock | TableRowBlock | ExternalObjectInstance | BreadcrumbInstance;
/**
 * Base properties shared by all blocks.
 */
interface BaseBlock {
    id: ID;
    type: BlockType;
    properties?: any;
    format?: any;
    content?: ID[];
    space_id?: ID;
    parent_id: ID;
    parent_table: string | 'space' | 'block' | 'table';
    version: number;
    created_time: number;
    last_edited_time: number;
    alive: boolean;
    created_by_table: string;
    created_by_id: ID;
    last_edited_by_table: string;
    last_edited_by_id: ID;
}
interface BaseTextBlock extends BaseBlock {
    content?: ID[];
    properties?: {
        title: Decoration[];
    };
    format?: {
        block_color: Color;
    };
}
interface BaseContentBlock extends BaseBlock {
    properties: {
        source: string[][];
        caption?: Decoration[];
    };
    format?: {
        block_alignment: 'center' | 'left' | 'right';
        block_width: number;
        block_height: number;
        display_source: string;
        block_full_width: boolean;
        block_page_width: boolean;
        block_aspect_ratio: number;
        block_preserve_scale: boolean;
    };
    file_ids?: string[];
}
interface BasePageBlock extends BaseBlock {
    properties?: {
        title: Decoration[];
    };
    format: {
        page_full_width?: boolean;
        page_small_text?: boolean;
        page_cover_position?: number;
        card_cover_position?: number;
        block_locked?: boolean;
        block_locked_by?: string;
        page_cover?: string;
        page_icon?: string;
        block_color?: Color;
    };
    permissions: {
        role: Role;
        type: string;
    }[];
    file_ids?: string[];
}
interface PageBlock extends BasePageBlock {
    type: 'page';
}
interface BookmarkBlock extends BaseBlock {
    type: 'bookmark';
    properties: {
        link: Decoration[];
        title: Decoration[];
        description: Decoration[];
    };
    format: {
        block_color?: string;
        bookmark_icon: string;
        bookmark_cover: string;
    };
}
interface TextBlock extends BaseTextBlock {
    type: 'text';
}
interface BulletedListBlock extends BaseTextBlock {
    type: 'bulleted_list';
}
interface NumberedListBlock extends BaseTextBlock {
    type: 'numbered_list';
}
interface HeaderBlock extends BaseTextBlock {
    type: 'header';
    format?: {
        block_color: Color;
        toggleable?: boolean;
    };
}
interface SubHeaderBlock extends BaseTextBlock {
    type: 'sub_header';
    format?: {
        block_color: Color;
        toggleable?: boolean;
    };
}
interface SubSubHeaderBlock extends BaseTextBlock {
    type: 'sub_sub_header';
    format?: {
        block_color: Color;
        toggleable?: boolean;
    };
}
interface QuoteBlock extends BaseTextBlock {
    type: 'quote';
}
interface EquationBlock extends BaseTextBlock {
    type: 'equation';
}
interface TodoBlock extends BaseTextBlock {
    type: 'to_do';
    properties: {
        title: Decoration[];
        checked: (['Yes'] | ['No'])[];
    };
}
interface TableOfContentsBlock extends BaseBlock {
    type: 'table_of_contents';
    format?: {
        block_color: Color;
    };
}
interface DividerBlock extends BaseBlock {
    type: 'divider';
}
interface ColumnListBlock extends BaseBlock {
    type: 'column_list';
}
interface ColumnBlock extends BaseBlock {
    type: 'column';
    format: {
        column_ratio: number;
    };
}
interface CalloutBlock extends BaseBlock {
    type: 'callout';
    format: {
        page_icon: string;
        block_color: Color;
    };
    properties: {
        title: Decoration[];
    };
}
interface ToggleBlock extends BaseBlock {
    type: 'toggle';
    properties: {
        title: Decoration[];
    };
}
interface ImageBlock extends BaseContentBlock {
    type: 'image';
}
interface EmbedBlock extends BaseContentBlock {
    type: 'embed';
}
interface GistBlock extends BaseContentBlock {
    type: 'gist';
}
interface VideoBlock extends BaseContentBlock {
    type: 'video';
}
interface FigmaBlock extends BaseContentBlock {
    type: 'figma';
}
interface TypeformBlock extends BaseContentBlock {
    type: 'typeform';
}
interface ReplitBlock extends BaseContentBlock {
    type: 'replit';
}
interface CodepenBlock extends BaseContentBlock {
    type: 'codepen';
}
interface ExcalidrawBlock extends BaseContentBlock {
    type: 'excalidraw';
}
interface TweetBlock extends BaseContentBlock {
    type: 'tweet';
}
interface MapsBlock extends BaseContentBlock {
    type: 'maps';
}
interface PdfBlock extends BaseContentBlock {
    type: 'pdf';
}
interface AudioBlock extends BaseContentBlock {
    type: 'audio';
}
interface MiroBlock extends BaseContentBlock {
    type: 'miro';
}
interface FileBlock extends BaseBlock {
    type: 'file';
    properties: {
        title: Decoration[];
        size: Decoration[];
        source: string[][];
    };
    file_ids?: string[];
}
interface GoogleDriveBlock extends BaseContentBlock {
    type: 'drive';
    format: {
        drive_status: {
            authed: boolean;
            last_fetched: number;
        };
        drive_properties: {
            url: string;
            icon: string;
            title: string;
            file_id: string;
            trashed: boolean;
            version: string;
            thumbnail: string;
            user_name: string;
            modified_time: number;
        };
        block_alignment: 'center' | 'left' | 'right';
        block_width: number;
        block_height: number;
        display_source: string;
        block_full_width: boolean;
        block_page_width: boolean;
        block_aspect_ratio: number;
        block_preserve_scale: boolean;
    };
    file_ids?: string[];
}
interface CodeBlock extends BaseBlock {
    type: 'code';
    properties: {
        title: Decoration[];
        language: Decoration[];
        caption: Decoration[];
    };
}
interface CollectionViewBlock extends BaseContentBlock {
    type: 'collection_view';
    collection_id?: ID;
    view_ids: ID[];
    format?: BaseContentBlock['format'] & {
        collection_pointer?: {
            id: ID;
            spaceId: ID;
            table: string;
        };
    };
}
interface CollectionViewPageBlock extends BasePageBlock {
    type: 'collection_view_page';
    collection_id?: ID;
    view_ids: ID[];
    format: BasePageBlock['format'] & {
        collection_pointer?: {
            id: ID;
            spaceId: ID;
            table: string;
        };
    };
}
interface SyncBlock extends BaseBlock {
    type: 'transclusion_container';
}
interface SyncPointerBlock extends BaseBlock {
    type: 'transclusion_reference';
    format: {
        copied_from_pointer: {
            id: string;
            spaceid: string;
        };
        transclusion_reference_pointer: {
            id: string;
            spaceId: string;
        };
    };
}
interface PageLink extends BaseBlock {
    type: 'alias';
    format: {
        alias_pointer: {
            id: string;
        };
    };
}
interface TableBlock extends BaseBlock {
    type: 'table';
    collection_id: ID;
    format: {
        collection_pointer: {
            id: ID;
            table: string;
            spaceId: ID;
        };
        table_block_column_format?: {
            [column: string]: {
                width?: number;
                color?: Color;
            };
        };
        table_block_column_header: boolean;
        table_block_row_header: boolean;
        table_block_column_order: string[];
    };
    view_ids: ID[];
}
interface TableRowBlock extends BaseBlock {
    type: 'table_row';
    properties: {
        [column: string]: Decoration[];
    };
}
interface ExternalObjectInstance extends BaseBlock {
    type: 'external_object_instance';
    format: {
        domain: string;
        original_url: string;
    };
}
interface BreadcrumbInstance extends BaseBlock {
    type: 'breadcrumb';
}

type FormulaType = 'constant' | 'property' | 'operator' | 'function' | 'symbol';
type FormulaConstantType = 'e' | 'false' | 'true' | 'pi';
type FormulaValueType = 'string' | 'number' | 'boolean' | 'date' | FormulaConstantType;
type FormulaResult = string | number | boolean | Date;
type FormulaResultType = 'text' | 'number' | 'boolean' | 'date' | 'checkbox';
type FormulaOperatorType = '-' | '*' | '%' | '/' | '+' | '!=' | '<=' | '==' | '>' | '<' | '>=';
type FormulaFunctionType = 'and' | 'empty' | 'equal' | 'if' | 'larger' | 'largerEq' | 'not' | 'or' | 'smaller' | 'smallerEq' | 'unequal' | 'abs' | 'add' | 'cbrt' | 'ceil' | 'divide' | 'exp' | 'floor' | 'ln' | 'log10' | 'log2' | 'max' | 'min' | 'mod' | 'multiply' | 'pow' | 'round' | 'sign' | 'sqrt' | 'subtract' | 'toNumber' | 'unaryMinus' | 'unaryPlus' | 'concat' | 'contains' | 'format' | 'join' | 'length' | 'replace' | 'replaceAll' | 'slice' | 'test' | 'date' | 'dateAdd' | 'dateBetween' | 'dateSubtract' | 'day' | 'end' | 'formatDate' | 'fromTimestamp' | 'hour' | 'minute' | 'month' | 'now' | 'start' | 'timestamp' | 'year';
interface BaseFormula {
    type: FormulaType;
    result_type: FormulaResultType;
}
interface ConstantFormula extends BaseFormula {
    type: 'constant';
    value: any;
    value_type: FormulaValueType;
}
interface PropertyFormula extends BaseFormula {
    type: 'property';
    id: PropertyID;
    name: string;
}
interface SymbolFormula extends BaseFormula {
    type: 'symbol';
    name: string;
}
interface FunctionFormula extends BaseFormula {
    type: 'function';
    name: FormulaFunctionType;
    args: Array<Formula>;
}
interface OperatorFormula extends BaseFormula {
    type: 'operator';
    operator: FormulaOperatorType;
    name: FormulaFunctionType;
    args: Array<Formula>;
}
type Formula = FunctionFormula | OperatorFormula | ConstantFormula | PropertyFormula | SymbolFormula;

interface SelectOption {
    id: ID;
    color: Color;
    value: string;
}
interface CollectionPropertySchema {
    name: string;
    type: PropertyType;
    options?: SelectOption[];
    number_format?: NumberFormat;
    formula?: Formula;
}
interface CollectionPropertySchemaMap {
    [key: string]: CollectionPropertySchema;
}
interface Collection {
    id: ID;
    version: number;
    name: Decoration[];
    schema: CollectionPropertySchemaMap;
    icon: string;
    parent_id: ID;
    parent_table: string;
    alive: boolean;
    copied_from: string;
    template_pages?: Array<ID>;
    format?: {
        collection_page_properties?: Array<{
            property: PropertyID;
            visible: boolean;
        }>;
        property_visibility?: Array<{
            property: PropertyID;
            visibility: 'show' | 'hide';
        }>;
        hide_linked_collection_name?: boolean;
    };
}

/** Types of collection views supported by Notion */
type CollectionViewType = 'table' | 'gallery' | 'list' | 'board' | 'calendar' | 'reducer';
type CollectionCardCoverType = 'page_cover' | 'page_content' | 'property' | 'none' | 'file';
type CollectionCardCoverSize = 'small' | 'medium' | 'large';
type CollectionCardCoverAspect = 'cover' | 'contain';
interface BaseCollectionView {
    id: ID;
    type: CollectionViewType;
    name: string;
    format: any;
    version: number;
    alive: boolean;
    parent_id: ID;
    parent_table: string;
    query?: any;
    query2: {
        filter?: any;
        aggregations?: object[];
        group_by: PropertyID;
    };
}
interface TableCollectionView extends BaseCollectionView {
    type: 'table';
    format: {
        table_wrap: boolean;
        table_properties: Array<{
            property: PropertyID;
            visible: boolean;
            width: number;
        }>;
    };
    page_sort: ID[];
}
interface GalleryCollectionView extends BaseCollectionView {
    type: 'gallery';
    format: {
        gallery_cover: CollectionCardCover;
        gallery_cover_size: CollectionCardCoverSize;
        gallery_cover_aspect: CollectionCardCoverAspect;
        gallery_properties: Array<{
            property: PropertyID;
            visible: boolean;
        }>;
    };
}
interface ListCollectionView extends BaseCollectionView {
    type: 'list';
    format: {
        list_properties: Array<{
            property: PropertyID;
            visible: boolean;
        }>;
    };
}
interface CollectionCardCover {
    type: CollectionCardCoverType;
    property?: PropertyID;
}
interface BoardCollectionView extends BaseCollectionView {
    type: 'board';
    format: {
        board_cover: CollectionCardCover;
        board_cover_size: CollectionCardCoverSize;
        board_cover_aspect: CollectionCardCoverAspect;
        board_properties: Array<{
            property: PropertyID;
            visible: boolean;
        }>;
        board_groups2: Array<{
            property: PropertyID;
            hidden: boolean;
            value: {
                type: PropertyType;
                value: string;
            };
        }>;
        board_columns: Array<{
            property: PropertyID;
            hidden: boolean;
            value: {
                type: PropertyType;
                value: string;
            };
        }>;
    };
}
interface CalendarCollectionView extends BaseCollectionView {
    type: 'calendar';
}
interface ReducerCollectionView extends BaseCollectionView {
    type: 'reducer';
    reducerResults: {
        collection_group_results: object;
    };
    sizeHint: number;
}
type CollectionView = TableCollectionView | GalleryCollectionView | ListCollectionView | BoardCollectionView | CalendarCollectionView | ReducerCollectionView;

interface User {
    id: ID;
    version: number;
    email: string;
    given_name: string;
    family_name: string;
    profile_photo: string;
    onboarding_completed: boolean;
    mobile_onboarding_completed: boolean;
}

interface NotionMap<T> {
    [key: string]: {
        role: Role;
        value: T;
    };
}
type BlockMap = NotionMap<Block>;
type UserMap = NotionMap<User>;
type CollectionMap = NotionMap<Collection>;
type CollectionViewMap = NotionMap<CollectionView>;
interface PropertyMap {
    [key: string]: Decoration[];
}
interface RecordMap {
    block: BlockMap;
    collection?: CollectionMap;
    collection_view?: CollectionViewMap;
    notion_user?: UserMap;
}
interface ExtendedRecordMap extends RecordMap {
    collection: CollectionMap;
    collection_view: CollectionViewMap;
    notion_user: UserMap;
    collection_query: {
        [collectionId: string]: {
            [collectionViewId: string]: CollectionQueryResult;
        };
    };
    signed_urls: {
        [blockId: string]: string;
    };
    preview_images?: PreviewImageMap;
}
interface PageChunk {
    recordMap: RecordMap;
    cursor: {
        stack: any[];
    };
}
interface CollectionInstance {
    recordMap: RecordMap;
    result: CollectionQueryResult;
}
interface CollectionQueryResult {
    type: CollectionViewType;
    total: number;
    blockIds: ID[];
    aggregationResults: Array<AggregationResult>;
    groupResults?: Array<{
        value: AggregationResult;
        blockIds: ID[];
        total: number;
        aggregationResult: AggregationResult;
    }>;
    collection_group_results?: {
        type: string;
        blockIds: ID[];
        hasMore: boolean;
    };
    reducerResults?: {
        collection_group_results: {
            type: string;
            blockIds: ID[];
            hasMore: boolean;
        };
    };
    collectionIds?: ID[];
    recordMap?: ExtendedRecordMap;
}
interface AggregationResult {
    type: PropertyType;
    value: any;
}
interface PageMap {
    [pageId: string]: ExtendedRecordMap | null;
}
interface PreviewImage {
    originalWidth: number;
    originalHeight: number;
    dataURIBase64: string;
}
interface PreviewImageMap {
    [url: string]: PreviewImage | null;
}

interface RecordValues<T> {
    results: T[];
}
interface SearchParams {
    ancestorId: string;
    query: string;
    filters?: {
        isDeletedOnly: boolean;
        excludeTemplates: boolean;
        isNavigableOnly: boolean;
        requireEditPermissions: boolean;
    };
    limit?: number;
    searchSessionId?: string;
}
interface SearchResults {
    recordMap: RecordMap;
    results: SearchResult[];
    total: number;
}
interface SearchResult {
    id: string;
    isNavigable: boolean;
    score: number;
    highlight: {
        pathText: string;
        text: string;
    };
}
interface APIError {
    errorId: string;
    name: string;
    message: string;
}

export type { APIError, AdditionalDecoration, AggregationResult, AudioBlock, BaseBlock, BaseCollectionView, BaseContentBlock, BaseDecoration, BaseFormula, BasePageBlock, BaseTextBlock, Block, BlockMap, BlockType, BoardCollectionView, BoldFormat, BookmarkBlock, BreadcrumbInstance, BulletedListBlock, CalendarCollectionView, CalloutBlock, CodeBlock, CodeFormat, CodepenBlock, Collection, CollectionCardCover, CollectionCardCoverAspect, CollectionCardCoverSize, CollectionCardCoverType, CollectionInstance, CollectionMap, CollectionPropertySchema, CollectionPropertySchemaMap, CollectionQueryResult, CollectionView, CollectionViewBlock, CollectionViewMap, CollectionViewPageBlock, CollectionViewType, Color, ColorFormat, ColumnBlock, ColumnListBlock, ConstantFormula, DateFormat, Decoration, DiscussionFormat, DividerBlock, EmbedBlock, EquationBlock, ExcalidrawBlock, ExtendedRecordMap, ExternalLinkFormat, ExternalObjectInstance, ExternalObjectInstanceFormat, FigmaBlock, FileBlock, FormattedDate, Formula, FormulaConstantType, FormulaFunctionType, FormulaOperatorType, FormulaResult, FormulaResultType, FormulaType, FormulaValueType, FunctionFormula, GalleryCollectionView, GistBlock, GoogleDriveBlock, HeaderBlock, ID, ImageBlock, InlineEquationFormat, ItalicFormat, LinkFormat, ListCollectionView, MapsBlock, MiroBlock, NotionMap, NumberFormat, NumberedListBlock, OperatorFormula, PageBlock, PageChunk, PageFormat, PageLink, PageMap, PdfBlock, PreviewImage, PreviewImageMap, PropertyFormula, PropertyID, PropertyMap, PropertyType, QuoteBlock, RecordMap, RecordValues, ReducerCollectionView, ReplitBlock, Role, SearchParams, SearchResult, SearchResults, SelectOption, StrikeFormat, SubDecoration, SubHeaderBlock, SubSubHeaderBlock, SymbolFormula, SyncBlock, SyncPointerBlock, TableBlock, TableCollectionView, TableOfContentsBlock, TableRowBlock, TextBlock, TodoBlock, ToggleBlock, TweetBlock, TypeformBlock, UnderlineFormat, User, UserFormat, UserMap, VideoBlock };
